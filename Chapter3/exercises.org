#+PROPERTY: header-args    :exports both
This is an org-mode file with ~scheme~ code blocks. If you clone this repo you can execute each block inside this file with ~C-c C-c~.

Because of some mysterious reason, results don't show up in the rendered github file. You can see them by opening the raw file.

* Table of Contents :TOC:
- [[#exercise-31][Exercise 3.1]]
- [[#exercise-32][Exercise 3.2]]
- [[#exercise-35][Exercise 3.5]]
- [[#exercise-38][Exercise 3.8]]

* Exercise 3.1

#+BEGIN_SRC scheme :results output
  (define (make-accumulator initial-value)
    (let ((accumulator initial-value))
      (lambda (x)
        (set! accumulator (+ accumulator x))
        accumulator)))


  (define A (make-accumulator 5))
  (define B (make-accumulator 10))

  (display (A 10))
  (display "\n")
  (display (A 10))
  (display "\n")
  (display (B 13))

#+END_SRC

#+RESULTS:
: 15
: 25
: 23

* Exercise 3.2

This solution only works for procs with one input argument:

#+BEGIN_SRC scheme
  (define (make-monitored proc)
    (let ((calls 0))
      (define (new-proc arg)
        (set! calls (+ calls 1))
        (proc arg))
      (define (dispatch order)
        (cond ((eq? order 'how-many-calls?) calls)
              ((eq? order 'reset-count) (set! calls 0))
              (else (new-proc order))))
      dispatch))
#+END_SRC


We could think of generalizing it with dotted-tail notation and ~apply~.

* Exercise 3.5
#+BEGIN_SRC scheme
  (define (estimate-integral P x1 x2 y1 y2 trials)
    (define (experiment)
      (let ((rand-x (random-in-range x1 x2))
            (rand-y (random-in-range y1 y2)))
        (P rand-x rand-y)))
    (* (monte-carlo trials experiment) (area-rectangle x1 x2 y1 y2)))

  (define (unit-circle? x y)
    (<= (+ (* x x)
           (* y y))
        1))



  (define (area-rectangle x1 x2 y1 y2)
    (* (- x2 x1) (- y2 y1)))

  (define (random-in-range low high)
    (let ((range (- high low)))
      (+ low (random range))))

  (define (monte-carlo trials experiment)
    (define (iter trials-remaining trials-passed)
      (cond ((= trials-remaining 0)
             (/ trials-passed trials))
            ((experiment)
             (iter (- trials-remaining 1) (+ trials-passed 1)))
            (else
             (iter (- trials-remaining 1) trials-passed))))
    (iter trials 0))


  (estimate-integral unit-circle? -1 1.0 -1 1.0 1000)
#+END_SRC

#+RESULTS:
: 3.176

We need to define at least one x coordinate and one y coordinate to be floating point for ~random-in-range~ to return a floating point in that rante, and not an integer, which would be 0 for the unit circle.

* Exercise 3.8

#+BEGIN_SRC scheme
  (define f
    (let* ((previous 1))
      (lambda (x)
        (let ((result (* previous x)))
          (set! previous x)
          result))))
#+END_SRC


